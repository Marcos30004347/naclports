diff --git a/src/google/protobuf/compiler/command_line_interface_unittest.cc b/src/google/protobuf/compiler/command_line_interface_unittest.cc
--- a/src/google/protobuf/compiler/command_line_interface_unittest.cc
+++ b/src/google/protobuf/compiler/command_line_interface_unittest.cc
@@ -67,6 +67,10 @@ namespace google {
 namespace protobuf {
 namespace compiler {
 
+// Disable this whole test when running on Native Client since it doesn't
+// support fork/spawning new processing.
+#if !defined(__native_client__)
+
 // Disable the whole test when we use tcmalloc for "draconian" heap checks, in
 // which case tcmalloc will print warnings that fail the plugin tests.
 #if !GOOGLE_PROTOBUF_HEAP_CHECK_DRACONIAN
@@ -1822,6 +1826,7 @@ TEST_F(EncodeDecodeTest, ProtoParseError) {
 
 }  // anonymous namespace
 
+#endif  // !__native_client__
 #endif  // !GOOGLE_PROTOBUF_HEAP_CHECK_DRACONIAN
 
 }  // namespace compiler
diff --git a/src/google/protobuf/compiler/ruby/ruby_generator_unittest.cc b/src/google/protobuf/compiler/ruby/ruby_generator_unittest.cc
--- a/src/google/protobuf/compiler/ruby/ruby_generator_unittest.cc
+++ b/src/google/protobuf/compiler/ruby/ruby_generator_unittest.cc
@@ -39,6 +39,10 @@
 #include <gtest/gtest.h>
 #include <google/protobuf/testing/file.h>
 
+// Don't try to run ruby tests.  The source distribution doesn't seem to
+// contain the ruby test data at all
+#if !defined(__native_client__)
+
 namespace google {
 namespace protobuf {
 namespace compiler {
@@ -121,3 +125,5 @@ TEST(RubyGeneratorTest, GeneratorTest) {
 }  // namespace compiler
 }  // namespace protobuf
 }  // namespace google
+
+#endif  // __native_client__
diff --git a/src/google/protobuf/io/zero_copy_stream_unittest.cc b/src/google/protobuf/io/zero_copy_stream_unittest.cc
--- a/src/google/protobuf/io/zero_copy_stream_unittest.cc
+++ b/src/google/protobuf/io/zero_copy_stream_unittest.cc
@@ -848,6 +848,9 @@ TEST_F(IoTest, FileWriteError) {
   EXPECT_EQ(EBADF, input.GetErrno());
 }
 
+// pipe() doesn't under sel_ldr.
+// TODO(sbc): Its possible we could make this work with nacl_io.
+#ifndef __native_client__
 // Pipes are not seekable, so File{Input,Output}Stream ends up doing some
 // different things to handle them.  We'll test by writing to a pipe and
 // reading back from it.
@@ -876,6 +879,7 @@ TEST_F(IoTest, PipeIo) {
     }
   }
 }
+#endif
 
 // Test using C++ iostreams.
 TEST_F(IoTest, IostreamIo) {
diff --git a/src/google/protobuf/message_unittest.cc b/src/google/protobuf/message_unittest.cc
--- a/src/google/protobuf/message_unittest.cc
+++ b/src/google/protobuf/message_unittest.cc
@@ -110,6 +110,7 @@ TEST(MessageTest, ParseFromFileDescriptor) {
   string filename = TestSourceDir() +
                     "/google/protobuf/testdata/golden_message";
   int file = open(filename.c_str(), O_RDONLY | O_BINARY);
+  ASSERT_NE(file, -1);
 
   unittest::TestAllTypes message;
   EXPECT_TRUE(message.ParseFromFileDescriptor(file));
@@ -123,6 +124,7 @@ TEST(MessageTest, ParsePackedFromFileDescriptor) {
       TestSourceDir() +
       "/google/protobuf/testdata/golden_packed_fields_message";
   int file = open(filename.c_str(), O_RDONLY | O_BINARY);
+  ASSERT_NE(file, -1);
 
   unittest::TestPackedTypes message;
   EXPECT_TRUE(message.ParseFromFileDescriptor(file));
diff --git a/src/google/protobuf/stubs/atomicops.h b/src/google/protobuf/stubs/atomicops.h
--- a/src/google/protobuf/stubs/atomicops.h
+++ b/src/google/protobuf/stubs/atomicops.h
@@ -212,7 +212,7 @@ Atomic64 Release_Load(volatile const Atomic64* ptr);
 #include <google/protobuf/stubs/atomicops_internals_mips_gcc.h>
 #elif defined(GOOGLE_PROTOBUF_ARCH_POWER)
 #include <google/protobuf/stubs/atomicops_internals_power.h>
-#elif defined(__native_client__)
+#elif defined(__pnacl__)
 #include <google/protobuf/stubs/atomicops_internals_pnacl.h>
 #elif (((__GNUC__ == 4) && (__GNUC_MINOR__ >= 7)) || (__GNUC__ > 4))
 #include <google/protobuf/stubs/atomicops_internals_generic_gcc.h>
diff --git a/src/google/protobuf/stubs/stringprintf_unittest.cc b/src/google/protobuf/stubs/stringprintf_unittest.cc
--- a/src/google/protobuf/stubs/stringprintf_unittest.cc
+++ b/src/google/protobuf/stubs/stringprintf_unittest.cc
@@ -54,8 +54,8 @@ TEST(StringPrintfTest, Empty) {
 }
 
 TEST(StringPrintfTest, Misc) {
-// MSVC and mingw does not support $ format specifier.
-#if !defined(_MSC_VER) && !defined(__MINGW32__)
+// MSVC, mingw and newlib don't not support $ format specifier.
+#if !defined(_MSC_VER) && !defined(__MINGW32__) && !defined(_NEWLIB_VERSION)
   EXPECT_EQ("123hello w", StringPrintf("%3$d%2$s %1$c", 'w', "hello", 123));
 #endif  // !_MSC_VER
 }
