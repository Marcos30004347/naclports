diff --git a/configure b/configure
--- a/configure
+++ b/configure
@@ -2974,18 +2974,22 @@ $as_echo "/* confdefs.h */" > confdefs.h
 # Predefined preprocessor variables.
 
 cat >>confdefs.h <<_ACEOF
+#undef PACKAGE_NAME
 #define PACKAGE_NAME "$PACKAGE_NAME"
 _ACEOF
 
 cat >>confdefs.h <<_ACEOF
+#undef PACKAGE_TARNAME
 #define PACKAGE_TARNAME "$PACKAGE_TARNAME"
 _ACEOF
 
 cat >>confdefs.h <<_ACEOF
+#undef PACKAGE_VERSION
 #define PACKAGE_VERSION "$PACKAGE_VERSION"
 _ACEOF
 
 cat >>confdefs.h <<_ACEOF
+#undef PACKAGE_STRING
 #define PACKAGE_STRING "$PACKAGE_STRING"
 _ACEOF
 
@@ -18160,31 +18164,10 @@ MAYBE_WARN="$MAYBE_WARN -erroff=E_ENUM_TYPE_MISMATCH_ARG \
 			-erroff=E_ENUM_TYPE_MISMATCH_OP"
 
 
+# Removed -flto flag as it seems to cause problems with the latest
+# version of our arm compiler:
+# https://code.google.com/p/nativeclient/issues/detail?id=3995
 
-safe_MAYBE_WARN="$MAYBE_WARN"
-MAYBE_WARN="$MAYBE_WARN -flto"
-cat confdefs.h - <<_ACEOF >conftest.$ac_ext
-/* end confdefs.h.  */
-
-int
-main ()
-{
-
-	int main(int argc, char **argv) { return 0; }
-
-  ;
-  return 0;
-}
-_ACEOF
-if ac_fn_c_try_link "$LINENO"; then :
-
-else
-
-	MAYBE_WARN="$safe_MAYBE_WARN"
-
-fi
-rm -f core conftest.err conftest.$ac_objext \
-    conftest$ac_exeext conftest.$ac_ext
 
 MAYBE_WARN="$MAYBE_WARN -fno-strict-aliasing -fno-common"
 
@@ -18805,10 +18788,10 @@ _ACEOF
 if ac_fn_c_try_compile "$LINENO"; then :
 
 
-if strings - conftest.$ac_objext | grep noonsees >/dev/null ; then
+if ${NACLSTRINGS} - conftest.$ac_objext | grep noonsees >/dev/null ; then
   ax_cv_c_float_words_bigendian=yes
 fi
-if strings - conftest.$ac_objext | grep seesnoon >/dev/null ; then
+if ${NACLSTRINGS} - conftest.$ac_objext | grep seesnoon >/dev/null ; then
   if test "$ax_cv_c_float_words_bigendian" = unknown; then
     ax_cv_c_float_words_bigendian=no
   else
diff --git a/src/cairo-wideint-type-private.h b/src/cairo-wideint-type-private.h
--- a/src/cairo-wideint-type-private.h
+++ b/src/cairo-wideint-type-private.h
@@ -124,12 +124,20 @@ typedef struct _cairo_quorem64 {
     cairo_int64_t	rem;
 } cairo_quorem64_t;
 
+/*
+ * TODO(phosek): nacl-clang declares __uint128_t (but not uint128_t), which
+ * is a gcc extension. However, it does not provide a runtime support for
+ * neither __uint128_t nor uint128_t in compiler-rt which causes an error
+ * during linking. The following check is a temporary workaround.
+ */
+#if !defined(__native_client__) || !defined(__clang__)
 /* gcc has a non-standard name. */
 #if HAVE___UINT128_T && !HAVE_UINT128_T
 typedef __uint128_t uint128_t;
 typedef __int128_t int128_t;
 #define HAVE_UINT128_T 1
 #endif
+#endif
 
 #if !HAVE_UINT128_T
 
