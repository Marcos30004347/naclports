diff --git a/libavutil/x86/asm.h b/libavutil/x86/asm.h
index 70ccac7..c783121 100644
--- a/libavutil/x86/asm.h
+++ b/libavutil/x86/asm.h
@@ -26,7 +26,7 @@
 
 typedef struct xmm_reg { uint64_t a, b; } xmm_reg;
 
-#if ARCH_X86_64
+#if 1
 #    define OPSIZE "q"
 #    define REG_a "rax"
 #    define REG_b "rbx"
@@ -70,6 +70,15 @@ typedef int32_t x86_reg;
 typedef int x86_reg;
 #endif
 
+// // test override for nacl x84_64
+// #    define REG_BP "rbp"
+// // used for arithmetics - use 32 bit only
+// #    define REGBP   rbp
+// #    define REGa    rax
+// #    define REGb    rbx
+// #    define REGc    rcx
+// #    define REGd    rdx
+
 #define HAVE_7REGS (ARCH_X86_64 || (HAVE_EBX_AVAILABLE && HAVE_EBP_AVAILABLE))
 #define HAVE_6REGS (ARCH_X86_64 || (HAVE_EBX_AVAILABLE || HAVE_EBP_AVAILABLE))
 
diff --git a/libpostproc/postprocess_template.c b/libpostproc/postprocess_template.c
index 74b0ab4..3ed2c45 100644
--- a/libpostproc/postprocess_template.c
+++ b/libpostproc/postprocess_template.c
@@ -112,8 +112,8 @@ static inline int RENAME(vertClassify)(uint8_t src[], int stride, PPContext *c){
     int numEq= 0, dcOk;
     src+= stride*4; // src points to begin of the 8x8 Block
     __asm__ volatile(
-        "movq %0, %%mm7                         \n\t"
-        "movq %1, %%mm6                         \n\t"
+        "movq %q0, %%mm7                         \n\t"
+        "movq %q1, %%mm6                         \n\t"
         : : "m" (c->mmxDcOffset[c->nonBQP]),  "m" (c->mmxDcThreshold[c->nonBQP])
         );
 
@@ -122,7 +122,7 @@ static inline int RENAME(vertClassify)(uint8_t src[], int stride, PPContext *c){
 //      0       1       2       3       4       5       6       7       8       9
 //      %1      eax     eax+%2  eax+2%2 %1+4%2  ecx     ecx+%2  ecx+2%2 %1+8%2  ecx+4%2
 
-        "movq (%2), %%mm0                       \n\t"
+        "movq (%q2), %%mm0                       \n\t"
         "movq (%%"REG_a"), %%mm1                \n\t"
         "movq %%mm0, %%mm3                      \n\t"
         "movq %%mm0, %%mm4                      \n\t"
@@ -132,7 +132,7 @@ static inline int RENAME(vertClassify)(uint8_t src[], int stride, PPContext *c){
         "paddb %%mm7, %%mm0                     \n\t"
         "pcmpgtb %%mm6, %%mm0                   \n\t"
 
-        "movq (%%"REG_a",%3), %%mm2             \n\t"
+        "movq (%%"REG_a",%q3), %%mm2             \n\t"
         PMAXUB(%%mm2, %%mm4)
         PMINUB(%%mm2, %%mm3, %%mm5)
         "psubb %%mm2, %%mm1                     \n\t"
@@ -140,7 +140,7 @@ static inline int RENAME(vertClassify)(uint8_t src[], int stride, PPContext *c){
         "pcmpgtb %%mm6, %%mm1                   \n\t"
         "paddb %%mm1, %%mm0                     \n\t"
 
-        "movq (%%"REG_a", %3, 2), %%mm1         \n\t"
+        "movq (%%"REG_a", %q3, 2), %%mm1         \n\t"
         PMAXUB(%%mm1, %%mm4)
         PMINUB(%%mm1, %%mm3, %%mm5)
         "psubb %%mm1, %%mm2                     \n\t"
@@ -148,9 +148,9 @@ static inline int RENAME(vertClassify)(uint8_t src[], int stride, PPContext *c){
         "pcmpgtb %%mm6, %%mm2                   \n\t"
         "paddb %%mm2, %%mm0                     \n\t"
 
-        "lea (%%"REG_a", %3, 4), %%"REG_a"      \n\t"
+        "lea (%%"REG_a", %q3, 4), %%"REG_a"      \n\t"
 
-        "movq (%2, %3, 4), %%mm2                \n\t"
+        "movq (%q2, %q3, 4), %%mm2                \n\t"
         PMAXUB(%%mm2, %%mm4)
         PMINUB(%%mm2, %%mm3, %%mm5)
         "psubb %%mm2, %%mm1                     \n\t"
@@ -166,7 +166,7 @@ static inline int RENAME(vertClassify)(uint8_t src[], int stride, PPContext *c){
         "pcmpgtb %%mm6, %%mm2                   \n\t"
         "paddb %%mm2, %%mm0                     \n\t"
 
-        "movq (%%"REG_a", %3), %%mm2            \n\t"
+        "movq (%%"REG_a", %q3), %%mm2            \n\t"
         PMAXUB(%%mm2, %%mm4)
         PMINUB(%%mm2, %%mm3, %%mm5)
         "psubb %%mm2, %%mm1                     \n\t"
@@ -174,7 +174,7 @@ static inline int RENAME(vertClassify)(uint8_t src[], int stride, PPContext *c){
         "pcmpgtb %%mm6, %%mm1                   \n\t"
         "paddb %%mm1, %%mm0                     \n\t"
 
-        "movq (%%"REG_a", %3, 2), %%mm1         \n\t"
+        "movq (%%"REG_a", %q3, 2), %%mm1         \n\t"
         PMAXUB(%%mm1, %%mm4)
         PMINUB(%%mm1, %%mm3, %%mm5)
         "psubb %%mm1, %%mm2                     \n\t"
@@ -230,11 +230,11 @@ static inline void RENAME(doVertLowPass)(uint8_t *src, int stride, PPContext *c)
 #if TEMPLATE_PP_MMXEXT || TEMPLATE_PP_3DNOW
     src+= stride*3;
     __asm__ volatile(        //"movv %0 %1 %2\n\t"
-        "movq %2, %%mm0                         \n\t"  // QP,..., QP
+        "movq %q2, %%mm0                         \n\t"  // QP,..., QP
         "pxor %%mm4, %%mm4                      \n\t"
 
-        "movq (%0), %%mm6                       \n\t"
-        "movq (%0, %1), %%mm5                   \n\t"
+        "movq (%q0), %%mm6                       \n\t"
+        "movq (%q0, %q1), %%mm5                   \n\t"
         "movq %%mm5, %%mm1                      \n\t"
         "movq %%mm6, %%mm2                      \n\t"
         "psubusb %%mm6, %%mm5                   \n\t"
@@ -247,12 +247,12 @@ static inline void RENAME(doVertLowPass)(uint8_t *src, int stride, PPContext *c)
         "pandn %%mm1, %%mm2                     \n\t"
         "por %%mm2, %%mm6                       \n\t"// First Line to Filter
 
-        "movq (%0, %1, 8), %%mm5                \n\t"
+        "movq (%q0, %1, 8), %%mm5                \n\t"
         "lea (%0, %1, 4), %%"REG_a"             \n\t"
         "lea (%0, %1, 8), %%"REG_c"             \n\t"
         "sub %1, %%"REG_c"                      \n\t"
         "add %1, %0                             \n\t" // %0 points to line 1 not 0
-        "movq (%0, %1, 8), %%mm7                \n\t"
+        "movq (%q0, %1, 8), %%mm7                \n\t"
         "movq %%mm5, %%mm1                      \n\t"
         "movq %%mm7, %%mm2                      \n\t"
         "psubusb %%mm7, %%mm5                   \n\t"
@@ -272,20 +272,20 @@ static inline void RENAME(doVertLowPass)(uint8_t *src, int stride, PPContext *c)
         // 6 4 4 2
         // 6 8 2
 
-        "movq (%0, %1), %%mm0                   \n\t" //  1
+        "movq (%q0, %q1), %%mm0                   \n\t" //  1
         "movq %%mm0, %%mm1                      \n\t" //  1
         PAVGB(%%mm6, %%mm0)                           //1 1        /2
         PAVGB(%%mm6, %%mm0)                           //3 1        /4
 
-        "movq (%0, %1, 4), %%mm2                \n\t" //     1
+        "movq (%q0, %q1, 4), %%mm2                \n\t" //     1
         "movq %%mm2, %%mm5                      \n\t" //     1
         PAVGB((%%REGa), %%mm2)                        //    11        /2
         PAVGB((%0, %1, 2), %%mm2)                     //   211        /4
         "movq %%mm2, %%mm3                      \n\t" //   211        /4
-        "movq (%0), %%mm4                       \n\t" // 1
+        "movq (%q0), %%mm4                       \n\t" // 1
         PAVGB(%%mm4, %%mm3)                           // 4 211        /8
         PAVGB(%%mm0, %%mm3)                           //642211        /16
-        "movq %%mm3, (%0)                       \n\t" // X
+        "movq %%mm3, (%q0)                       \n\t" // X
         // mm1=2 mm2=3(211) mm4=1 mm5=5 mm6=0 mm7=9
         "movq %%mm1, %%mm0                      \n\t" //  1
         PAVGB(%%mm6, %%mm0)                           //1 1        /2
@@ -295,7 +295,7 @@ static inline void RENAME(doVertLowPass)(uint8_t *src, int stride, PPContext *c)
         PAVGB((%%REGa), %%mm5)                        //    211 /4
         PAVGB(%%mm5, %%mm3)                           // 2 2211 /8
         PAVGB(%%mm0, %%mm3)                           //4242211 /16
-        "movq %%mm3, (%0,%1)                    \n\t" //  X
+        "movq %%mm3, (%q0,%q1)                    \n\t" //  X
         // mm1=2 mm2=3(211) mm4=1 mm5=4(211) mm6=0 mm7=9
         PAVGB(%%mm4, %%mm6)                                   //11        /2
         "movq (%%"REG_c"), %%mm0                \n\t" //       1
@@ -304,10 +304,10 @@ static inline void RENAME(doVertLowPass)(uint8_t *src, int stride, PPContext *c)
         PAVGB(%%mm1, %%mm0)                           //  2   11/4
         PAVGB(%%mm6, %%mm0)                           //222   11/8
         PAVGB(%%mm2, %%mm0)                           //22242211/16
-        "movq (%0, %1, 2), %%mm2                \n\t" //   1
-        "movq %%mm0, (%0, %1, 2)                \n\t" //   X
+        "movq (%q0, %q1, 2), %%mm2                \n\t" //   1
+        "movq %%mm0, (%q0, %q1, 2)                \n\t" //   X
         // mm1=2 mm2=3 mm3=6(11) mm4=1 mm5=4(211) mm6=0(11) mm7=9
-        "movq (%%"REG_a", %1, 4), %%mm0         \n\t" //        1
+        "movq (%%"REG_a", %q1, 4), %%mm0         \n\t" //        1
         PAVGB((%%REGc), %%mm0)                        //       11        /2
         PAVGB(%%mm0, %%mm6)                           //11     11        /4
         PAVGB(%%mm1, %%mm4)                           // 11                /2
@@ -317,26 +317,26 @@ static inline void RENAME(doVertLowPass)(uint8_t *src, int stride, PPContext *c)
         "movq (%%"REG_a"), %%mm5                \n\t" //    1
         "movq %%mm6, (%%"REG_a")                \n\t" //    X
         // mm0=7(11) mm1=2(11) mm2=3 mm3=6(11) mm4=1(11) mm5=4 mm7=9
-        "movq (%%"REG_a", %1, 4), %%mm6         \n\t" //        1
+        "movq (%%"REG_a", %q1, 4), %%mm6         \n\t" //        1
         PAVGB(%%mm7, %%mm6)                           //        11        /2
         PAVGB(%%mm4, %%mm6)                           // 11     11        /4
         PAVGB(%%mm3, %%mm6)                           // 11   2211        /8
         PAVGB(%%mm5, %%mm2)                           //   11                /2
-        "movq (%0, %1, 4), %%mm4                \n\t" //     1
+        "movq (%q0, %q1, 4), %%mm4                \n\t" //     1
         PAVGB(%%mm4, %%mm2)                           //   112                /4
         PAVGB(%%mm2, %%mm6)                           // 112242211        /16
-        "movq %%mm6, (%0, %1, 4)                \n\t" //     X
+        "movq %%mm6, (%q0, %q1, 4)                \n\t" //     X
         // mm0=7(11) mm1=2(11) mm2=3(112) mm3=6(11) mm4=5 mm5=4 mm7=9
         PAVGB(%%mm7, %%mm1)                           //  11     2        /4
         PAVGB(%%mm4, %%mm5)                           //    11                /2
         PAVGB(%%mm5, %%mm0)                           //    11 11        /4
-        "movq (%%"REG_a", %1, 2), %%mm6         \n\t" //      1
+        "movq (%%"REG_a", %q1, 2), %%mm6         \n\t" //      1
         PAVGB(%%mm6, %%mm1)                           //  11  4  2        /8
         PAVGB(%%mm0, %%mm1)                           //  11224222        /16
-        "movq %%mm1, (%%"REG_a", %1, 2)         \n\t" //      X
+        "movq %%mm1, (%%"REG_a", %q1, 2)         \n\t" //      X
         // mm2=3(112) mm3=6(11) mm4=5 mm5=4(11) mm6=6 mm7=9
         PAVGB((%%REGc), %%mm2)                        //   112 4        /8
-        "movq (%%"REG_a", %1, 4), %%mm0         \n\t" //        1
+        "movq (%%"REG_a", %q1, 4), %%mm0         \n\t" //        1
         PAVGB(%%mm0, %%mm6)                           //      1 1        /2
         PAVGB(%%mm7, %%mm6)                           //      1 12        /4
         PAVGB(%%mm2, %%mm6)                           //   1122424        /4
@@ -1181,10 +1181,10 @@ FIND_MIN_MAX((%0, %1, 8))
 #endif
         "movq %%mm6, %%mm0                      \n\t" // max
         "psubb %%mm7, %%mm6                     \n\t" // max - min
-        "push %4                              \n\t"
+        "push %q4                              \n\t"
         "movd %%mm6, %k4                        \n\t"
         "cmpb "MANGLE(deringThreshold)", %b4    \n\t"
-        "pop %4                               \n\t"
+        "pop %q4                               \n\t"
         " jb 1f                                 \n\t"
         PAVGB(%%mm0, %%mm7)                           // a=(max + min)/2
         "punpcklbw %%mm7, %%mm7                 \n\t"
@@ -1919,8 +1919,8 @@ static inline void RENAME(deInterlaceMedian)(uint8_t src[], int stride)
 
 #else // MMX without MMX2
     __asm__ volatile(
-        "lea (%0, %1), %%"REG_a"                \n\t"
-        "lea (%%"REG_a", %1, 4), %%"REG_d"      \n\t"
+        "lea (%q0, %q1), %%"REG_a"                \n\t"
+        "lea (%%"REG_a", %q1, 4), %%"REG_d"      \n\t"
 //      0       1       2       3       4       5       6       7       8       9
 //      %0      eax     eax+%1  eax+2%1 %0+4%1  edx     edx+%1  edx+2%1 %0+8%1  edx+4%1
         "pxor %%mm7, %%mm7                      \n\t"
@@ -1950,10 +1950,10 @@ static inline void RENAME(deInterlaceMedian)(uint8_t src[], int stride)
         "movq %%mm0, " #b "                     \n\t"
 #define MEDIAN(a,b,c)  REAL_MEDIAN(a,b,c)
 
-MEDIAN((%0)        , (%%REGa)       , (%%REGa, %1))
-MEDIAN((%%REGa, %1), (%%REGa, %1, 2), (%0, %1, 4))
-MEDIAN((%0, %1, 4) , (%%REGd)       , (%%REGd, %1))
-MEDIAN((%%REGd, %1), (%%REGd, %1, 2), (%0, %1, 8))
+MEDIAN((%q0)        , (%%REGa)       , (%%REGa, %q1))
+MEDIAN((%%REGa, %q1), (%%REGa, %q1, 2), (%q0, %q1, 4))
+MEDIAN((%q0, %q1, 4) , (%%REGd)       , (%%REGd, %q1))
+MEDIAN((%%REGd, %q1), (%%REGd, %q1, 2), (%q0, %q1, 8))
 
         : : "r" (src), "r" ((x86_reg)stride)
         : "%"REG_a, "%"REG_d
@@ -1988,7 +1988,7 @@ MEDIAN((%%REGd, %1), (%%REGd, %1, 2), (%0, %1, 8))
 static inline void RENAME(transpose1)(uint8_t *dst1, uint8_t *dst2, uint8_t *src, int srcStride)
 {
     __asm__(
-        "lea (%0, %1), %%"REG_a"                \n\t"
+        "lea (%q0, %q1), %%"REG_a"                \n\t"
 //      0       1       2       3       4       5       6       7       8       9
 //      %0      eax     eax+%1  eax+2%1 %0+4%1  edx     edx+%1  edx+2%1 %0+8%1  edx+4%1
         "movq (%0), %%mm0                       \n\t" // 12345678
@@ -2025,7 +2025,7 @@ static inline void RENAME(transpose1)(uint8_t *dst1, uint8_t *dst2, uint8_t *src
         "psrlq $32, %%mm1                       \n\t"
         "movd %%mm1, 112(%3)                    \n\t"
 
-        "lea (%%"REG_a", %1, 4), %%"REG_a"      \n\t"
+        "lea (%%"REG_a", %q1, 4), %%"REG_a"      \n\t"
 
         "movq (%0, %1, 4), %%mm0                \n\t" // 12345678
         "movq (%%"REG_a"), %%mm1                \n\t" // abcdefgh
@@ -2073,8 +2073,8 @@ static inline void RENAME(transpose1)(uint8_t *dst1, uint8_t *dst2, uint8_t *src
 static inline void RENAME(transpose2)(uint8_t *dst, int dstStride, uint8_t *src)
 {
     __asm__(
-        "lea (%0, %1), %%"REG_a"                \n\t"
-        "lea (%%"REG_a",%1,4), %%"REG_d"        \n\t"
+        "lea (%q0, %q1), %%"REG_a"                \n\t"
+        "lea (%%"REG_a",%q1,4), %%"REG_d"        \n\t"
 //      0       1       2       3       4       5       6       7       8       9
 //      %0      eax     eax+%1  eax+2%1 %0+4%1  edx     edx+%1  edx+2%1 %0+8%1  edx+4%1
         "movq (%2), %%mm0                       \n\t" // 12345678
@@ -2162,9 +2162,9 @@ static inline void RENAME(tempNoiseReducer)(uint8_t *src, int stride,
 //#define L1_DIFF //u should change the thresholds too if u try that one
 #if TEMPLATE_PP_MMXEXT || TEMPLATE_PP_3DNOW
     __asm__ volatile(
-        "lea (%2, %2, 2), %%"REG_a"             \n\t" // 3*stride
-        "lea (%2, %2, 4), %%"REG_d"             \n\t" // 5*stride
-        "lea (%%"REG_d", %2, 2), %%"REG_c"      \n\t" // 7*stride
+        "lea (%q2, %q2, 2), %%"REG_a"             \n\t" // 3*stride
+        "lea (%q2, %q2, 4), %%"REG_d"             \n\t" // 5*stride
+        "lea (%%"REG_d", %q2, 2), %%"REG_c"      \n\t" // 7*stride
 //      0       1       2       3       4       5       6       7       8       9
 //      %x      %x+%2   %x+2%2  %x+eax  %x+4%2  %x+edx  %x+2eax %x+ecx  %x+8%2
 //FIXME reorder?
@@ -2268,8 +2268,8 @@ L2_DIFF_CORE((%0, %%REGc)  , (%1, %%REGc))
         "cmpl 516(%%"REG_d"), %%ecx             \n\t"
         " jb 1f                                 \n\t"
 
-        "lea (%%"REG_a", %2, 2), %%"REG_d"      \n\t" // 5*stride
-        "lea (%%"REG_d", %2, 2), %%"REG_c"      \n\t" // 7*stride
+        "lea (%%"REG_a", %q2, 2), %%"REG_d"      \n\t" // 5*stride
+        "lea (%%"REG_d", %q2, 2), %%"REG_c"      \n\t" // 7*stride
         "movq (%0), %%mm0                       \n\t" // L0
         "movq (%0, %2), %%mm1                   \n\t" // L1
         "movq (%0, %2, 2), %%mm2                \n\t" // L2
@@ -2289,8 +2289,8 @@ L2_DIFF_CORE((%0, %%REGc)  , (%1, %%REGc))
         "jmp 4f                                 \n\t"
 
         "1:                                     \n\t"
-        "lea (%%"REG_a", %2, 2), %%"REG_d"      \n\t" // 5*stride
-        "lea (%%"REG_d", %2, 2), %%"REG_c"      \n\t" // 7*stride
+        "lea (%%"REG_a", %q2, 2), %%"REG_d"      \n\t" // 5*stride
+        "lea (%%"REG_d", %q2, 2), %%"REG_c"      \n\t" // 7*stride
         "movq (%0), %%mm0                       \n\t" // L0
         PAVGB((%1), %%mm0)                            // L0
         "movq (%0, %2), %%mm1                   \n\t" // L1
@@ -2329,8 +2329,8 @@ L2_DIFF_CORE((%0, %%REGc)  , (%1, %%REGc))
         "cmpl 508(%%"REG_d"), %%ecx             \n\t"
         " jb 3f                                 \n\t"
 
-        "lea (%%"REG_a", %2, 2), %%"REG_d"      \n\t" // 5*stride
-        "lea (%%"REG_d", %2, 2), %%"REG_c"      \n\t" // 7*stride
+        "lea (%%"REG_a", %q2, 2), %%"REG_d"      \n\t" // 5*stride
+        "lea (%%"REG_d", %q2, 2), %%"REG_c"      \n\t" // 7*stride
         "movq (%0), %%mm0                       \n\t" // L0
         "movq (%0, %2), %%mm1                   \n\t" // L1
         "movq (%0, %2, 2), %%mm2                \n\t" // L2
@@ -2383,8 +2383,8 @@ L2_DIFF_CORE((%0, %%REGc)  , (%1, %%REGc))
         "jmp 4f                                 \n\t"
 
         "3:                                     \n\t"
-        "lea (%%"REG_a", %2, 2), %%"REG_d"      \n\t" // 5*stride
-        "lea (%%"REG_d", %2, 2), %%"REG_c"      \n\t" // 7*stride
+        "lea (%%"REG_a", %q2, 2), %%"REG_d"      \n\t" // 5*stride
+        "lea (%%"REG_d", %q2, 2), %%"REG_c"      \n\t" // 7*stride
         "movq (%0), %%mm0                       \n\t" // L0
         "movq (%0, %2), %%mm1                   \n\t" // L1
         "movq (%0, %2, 2), %%mm2                \n\t" // L2
@@ -2551,7 +2551,7 @@ static av_always_inline void RENAME(do_a_deblock)(uint8_t *src, int step, int st
         );
 
     __asm__ volatile(
-        "lea (%2, %3), %%"REG_a"                \n\t"
+        "lea (%q2, %q3), %%"REG_a"                \n\t"
 //      0       1       2       3       4       5       6       7       8       9
 //      %1      eax     eax+%2  eax+2%2 %1+4%2  ecx     ecx+%2  ecx+2%2 %1+8%2  ecx+4%2
 
@@ -2579,7 +2579,7 @@ static av_always_inline void RENAME(do_a_deblock)(uint8_t *src, int step, int st
         "pcmpgtb %%mm6, %%mm2                   \n\t"
         "paddb %%mm2, %%mm0                     \n\t"
 
-        "lea (%%"REG_a", %3, 4), %%"REG_a"      \n\t"
+        "lea (%%"REG_a", %q3, 4), %%"REG_a"      \n\t"
 
         "movq (%2, %3, 4), %%mm2                \n\t"
         PMAXUB(%%mm2, %%mm4)
@@ -2844,8 +2844,8 @@ static av_always_inline void RENAME(do_a_deblock)(uint8_t *src, int step, int st
             "punpcklbw %%mm7, %%mm0                 \n\t" // low part of line 0
             "punpckhbw %%mm7, %%mm1                 \n\t" // high part of line 0
 
-            "movq (%0, %1), %%mm2                   \n\t"
-            "lea (%0, %1, 2), %%"REG_a"             \n\t"
+            "movq (%q0, %q1), %%mm2                   \n\t"
+            "lea (%q0, %q1, 2), %%"REG_a"             \n\t"
             "movq %%mm2, %%mm3                      \n\t"
             "punpcklbw %%mm7, %%mm2                 \n\t" // low part of line 1
             "punpckhbw %%mm7, %%mm3                 \n\t" // high part of line 1
@@ -2893,7 +2893,7 @@ static av_always_inline void RENAME(do_a_deblock)(uint8_t *src, int step, int st
             "psubw %%mm2, %%mm4                     \n\t" // 2L2 - L3 + L4
             "psubw %%mm3, %%mm5                     \n\t" // 2H2 - H3 + H4
 
-            "lea (%%"REG_a", %1), %0                \n\t"
+            "lea (%%"REG_a", %q1), %0                \n\t"
             "psllw $2, %%mm2                        \n\t" // 4L3 - 4L4
             "psllw $2, %%mm3                        \n\t" // 4H3 - 4H4
             "psubw %%mm2, %%mm4                     \n\t" // 2L2 - 5L3 + 5L4
@@ -3094,8 +3094,8 @@ static inline void RENAME(blockCopy)(uint8_t dst[], int dstStride, const uint8_t
     __asm__ volatile(
         "movq (%%"REG_a"), %%mm2        \n\t" // packedYOffset
         "movq 8(%%"REG_a"), %%mm3       \n\t" // packedYScale
-        "lea (%2,%4), %%"REG_a"         \n\t"
-        "lea (%3,%5), %%"REG_d"         \n\t"
+        "lea (%q2,%q4), %%"REG_a"         \n\t"
+        "lea (%q3,%q5), %%"REG_d"         \n\t"
         "pxor %%mm4, %%mm4              \n\t"
 #if TEMPLATE_PP_MMXEXT
 #define REAL_SCALED_CPY(src1, src2, dst1, dst2)                                                \
@@ -3151,12 +3151,12 @@ static inline void RENAME(blockCopy)(uint8_t dst[], int dstStride, const uint8_t
 #define SCALED_CPY(src1, src2, dst1, dst2)\
    REAL_SCALED_CPY(src1, src2, dst1, dst2)
 
-SCALED_CPY((%2)       , (%2, %4)      , (%3)       , (%3, %5))
-SCALED_CPY((%2, %4, 2), (%%REGa, %4, 2), (%3, %5, 2), (%%REGd, %5, 2))
-SCALED_CPY((%2, %4, 4), (%%REGa, %4, 4), (%3, %5, 4), (%%REGd, %5, 4))
-        "lea (%%"REG_a",%4,4), %%"REG_a"        \n\t"
-        "lea (%%"REG_d",%5,4), %%"REG_d"        \n\t"
-SCALED_CPY((%%REGa, %4), (%%REGa, %4, 2), (%%REGd, %5), (%%REGd, %5, 2))
+SCALED_CPY((%q2)       , (%q2, %q4)      , (%q3)       , (%q3, %q5))
+SCALED_CPY((%q2, %q4, 2), (%%REGa, %4, 2), (%q3, %q5, 2), (%%REGd, %q5, 2))
+SCALED_CPY((%q2, %q4, 4), (%%REGa, %4, 4), (%q3, %q5, 4), (%%REGd, %q5, 4))
+        "lea (%%"REG_a",%q4,4), %%"REG_a"        \n\t"
+        "lea (%%"REG_d",%q5,4), %%"REG_d"        \n\t"
+SCALED_CPY((%%REGa, %4), (%%REGa, %q4, 2), (%%REGd, %q5), (%%REGd, %q5, 2))
 
 
         : "=&a" (packedOffsetAndScale)
@@ -3175,8 +3175,8 @@ SCALED_CPY((%%REGa, %4), (%%REGa, %4, 2), (%%REGd, %5), (%%REGd, %5, 2))
     }else{
 #if TEMPLATE_PP_MMX
     __asm__ volatile(
-        "lea (%0,%2), %%"REG_a"                 \n\t"
-        "lea (%1,%3), %%"REG_d"                 \n\t"
+        "lea (%q0,%q2), %%"REG_a"                 \n\t"
+        "lea (%q1,%q3), %%"REG_d"                 \n\t"
 
 #define REAL_SIMPLE_CPY(src1, src2, dst1, dst2)                              \
         "movq " #src1 ", %%mm0          \n\t"\
@@ -3215,13 +3215,13 @@ static inline void RENAME(duplicate)(uint8_t src[], int stride)
 {
 #if TEMPLATE_PP_MMX
     __asm__ volatile(
-        "movq (%0), %%mm0               \n\t"
-        "movq %%mm0, (%0, %1, 4)        \n\t"
-        "add %1, %0                     \n\t"
-        "movq %%mm0, (%0)               \n\t"
-        "movq %%mm0, (%0, %1)           \n\t"
-        "movq %%mm0, (%0, %1, 2)        \n\t"
-        "movq %%mm0, (%0, %1, 4)        \n\t"
+        "movq (%q0), %%mm0               \n\t"
+        "movq %%mm0, (%q0, %q1, 4)        \n\t"
+        "add %q1, %q0                     \n\t"
+        "movq %%mm0, (%q0)               \n\t"
+        "movq %%mm0, (%q0, %q1)           \n\t"
+        "movq %%mm0, (%q0, %q1, 2)        \n\t"
+        "movq %%mm0, (%q0, %q1, 4)        \n\t"
         : "+r" (src)
         : "r" ((x86_reg)-stride)
     );
@@ -3485,7 +3485,7 @@ static void RENAME(postProcess)(const uint8_t src[], int srcStride, uint8_t dst[
                 "packuswb %%mm7, %%mm7  \n\t" // 0, 0, 0, QP, 0, 0, 0, QP
                 "packuswb %%mm7, %%mm7  \n\t" // 0,QP, 0, QP, 0,QP, 0, QP
                 "packuswb %%mm7, %%mm7  \n\t" // QP,..., QP
-                "movq %%mm7, %0         \n\t"
+                "movq %%mm7, %q0         \n\t"
                 : "=m" (c.pQPb)
                 : "r" (QP)
             );
diff --git a/libswscale/x86/swscale_template.c b/libswscale/x86/swscale_template.c
index 63b938c..6de35a5 100644
--- a/libswscale/x86/swscale_template.c
+++ b/libswscale/x86/swscale_template.c
@@ -358,13 +358,13 @@ static void RENAME(yuv2rgb32_X_ar)(SwsContext *c, const int16_t *lumFilter,
         "psraw                        $3, %%mm1         \n\t"
         "psraw                        $3, %%mm7         \n\t"
         "packuswb                  %%mm7, %%mm1         \n\t"
-        WRITEBGR32(%4, %5, %%REGa, %%mm3, %%mm4, %%mm5, %%mm1, %%mm0, %%mm7, %%mm2, %%mm6)
+        WRITEBGR32(%q4, %5, %%REGa, %%mm3, %%mm4, %%mm5, %%mm1, %%mm0, %%mm7, %%mm2, %%mm6)
         YSCALEYUV2PACKEDX_END
     } else {
         YSCALEYUV2PACKEDX_ACCURATE
         YSCALEYUV2RGBX
         "pcmpeqd %%mm7, %%mm7 \n\t"
-        WRITEBGR32(%4, %5, %%REGa, %%mm2, %%mm4, %%mm5, %%mm7, %%mm0, %%mm1, %%mm3, %%mm6)
+        WRITEBGR32(%q4, %5, %%REGa, %%mm2, %%mm4, %%mm5, %%mm7, %%mm0, %%mm1, %%mm3, %%mm6)
         YSCALEYUV2PACKEDX_END
     }
 }
@@ -387,13 +387,13 @@ static void RENAME(yuv2rgb32_X)(SwsContext *c, const int16_t *lumFilter,
         "psraw                        $3, %%mm1         \n\t"
         "psraw                        $3, %%mm7         \n\t"
         "packuswb                  %%mm7, %%mm1         \n\t"
-        WRITEBGR32(%4, %5, %%REGa, %%mm2, %%mm4, %%mm5, %%mm1, %%mm0, %%mm7, %%mm3, %%mm6)
+        WRITEBGR32(%q4, %5, %%REGa, %%mm2, %%mm4, %%mm5, %%mm1, %%mm0, %%mm7, %%mm3, %%mm6)
         YSCALEYUV2PACKEDX_END
     } else {
         YSCALEYUV2PACKEDX
         YSCALEYUV2RGBX
         "pcmpeqd %%mm7, %%mm7 \n\t"
-        WRITEBGR32(%4, %5, %%REGa, %%mm2, %%mm4, %%mm5, %%mm7, %%mm0, %%mm1, %%mm3, %%mm6)
+        WRITEBGR32(%q4, %5, %%REGa, %%mm2, %%mm4, %%mm5, %%mm7, %%mm0, %%mm1, %%mm3, %%mm6)
         YSCALEYUV2PACKEDX_END
     }
 }
@@ -446,7 +446,7 @@ static void RENAME(yuv2rgb565_X_ar)(SwsContext *c, const int16_t *lumFilter,
     "paddusb "GREEN_DITHER"(%0), %%mm4\n\t"
     "paddusb "RED_DITHER"(%0), %%mm5\n\t"
 #endif
-    WRITERGB16(%4, %5, %%REGa)
+    WRITERGB16(%q4, %5, %%REGa)
     YSCALEYUV2PACKEDX_END
 }
 
@@ -470,7 +470,7 @@ static void RENAME(yuv2rgb565_X)(SwsContext *c, const int16_t *lumFilter,
     "paddusb "GREEN_DITHER"(%0), %%mm4  \n\t"
     "paddusb "RED_DITHER"(%0), %%mm5  \n\t"
 #endif
-    WRITERGB16(%4, %5, %%REGa)
+    WRITERGB16(%q4, %5, %%REGa)
     YSCALEYUV2PACKEDX_END
 }
 
@@ -523,7 +523,7 @@ static void RENAME(yuv2rgb555_X_ar)(SwsContext *c, const int16_t *lumFilter,
     "paddusb "GREEN_DITHER"(%0), %%mm4\n\t"
     "paddusb "RED_DITHER"(%0), %%mm5\n\t"
 #endif
-    WRITERGB15(%4, %5, %%REGa)
+    WRITERGB15(%q4, %5, %%REGa)
     YSCALEYUV2PACKEDX_END
 }
 
@@ -547,7 +547,7 @@ static void RENAME(yuv2rgb555_X)(SwsContext *c, const int16_t *lumFilter,
     "paddusb "GREEN_DITHER"(%0), %%mm4  \n\t"
     "paddusb "RED_DITHER"(%0), %%mm5  \n\t"
 #endif
-    WRITERGB15(%4, %5, %%REGa)
+    WRITERGB15(%q4, %5, %%REGa)
     YSCALEYUV2PACKEDX_END
 }
 
@@ -742,7 +742,7 @@ static void RENAME(yuv2yuyv422_X_ar)(SwsContext *c, const int16_t *lumFilter,
     "psraw $3, %%mm4    \n\t"
     "psraw $3, %%mm1    \n\t"
     "psraw $3, %%mm7    \n\t"
-    WRITEYUY2(%4, %5, %%REGa)
+    WRITEYUY2(%q4, %5, %%REGa)
     YSCALEYUV2PACKEDX_END
 }
 
@@ -763,7 +763,7 @@ static void RENAME(yuv2yuyv422_X)(SwsContext *c, const int16_t *lumFilter,
     "psraw $3, %%mm4    \n\t"
     "psraw $3, %%mm1    \n\t"
     "psraw $3, %%mm7    \n\t"
-    WRITEYUY2(%4, %5, %%REGa)
+    WRITEYUY2(%q4, %5, %%REGa)
     YSCALEYUV2PACKEDX_END
 }
 
@@ -771,11 +771,11 @@ static void RENAME(yuv2yuyv422_X)(SwsContext *c, const int16_t *lumFilter,
     "xor            "#index", "#index"  \n\t"\
     ".p2align              4            \n\t"\
     "1:                                 \n\t"\
-    "movq     (%2, "#index"), %%mm2     \n\t" /* uvbuf0[eax]*/\
-    "movq     (%3, "#index"), %%mm3     \n\t" /* uvbuf1[eax]*/\
+    "movq     (%q2, "#index"), %%mm2     \n\t" /* uvbuf0[eax]*/\
+    "movq     (%q3, "#index"), %%mm3     \n\t" /* uvbuf1[eax]*/\
     "add "UV_OFF_BYTE"("#c"), "#index"  \n\t" \
-    "movq     (%2, "#index"), %%mm5     \n\t" /* uvbuf0[eax+2048]*/\
-    "movq     (%3, "#index"), %%mm4     \n\t" /* uvbuf1[eax+2048]*/\
+    "movq     (%q2, "#index"), %%mm5     \n\t" /* uvbuf0[eax+2048]*/\
+    "movq     (%q3, "#index"), %%mm4     \n\t" /* uvbuf1[eax+2048]*/\
     "sub "UV_OFF_BYTE"("#c"), "#index"  \n\t" \
     "psubw             %%mm3, %%mm2     \n\t" /* uvbuf0[eax] - uvbuf1[eax]*/\
     "psubw             %%mm4, %%mm5     \n\t" /* uvbuf0[eax+2048] - uvbuf1[eax+2048]*/\
@@ -841,7 +841,7 @@ static void RENAME(yuv2yuyv422_X)(SwsContext *c, const int16_t *lumFilter,
 
 #define YSCALEYUV2RGB(index, c) \
     REAL_YSCALEYUV2RGB_UV(index, c) \
-    REAL_YSCALEYUV2RGB_YA(index, c, %0, %1) \
+    REAL_YSCALEYUV2RGB_YA(index, c, %q0, %q1) \
     REAL_YSCALEYUV2RGB_COEFF(c)
 
 /**
@@ -859,12 +859,12 @@ static void RENAME(yuv2rgb32_2)(SwsContext *c, const int16_t *buf[2],
         const int16_t *abuf0 = abuf[0], *abuf1 = abuf[1];
 #if ARCH_X86_64
         __asm__ volatile(
-            YSCALEYUV2RGB(%%r8, %5)
-            YSCALEYUV2RGB_YA(%%r8, %5, %6, %7)
+            YSCALEYUV2RGB(%%r8, %q5)
+            YSCALEYUV2RGB_YA(%%r8, %5, %q6, %q7)
             "psraw                  $3, %%mm1       \n\t" /* abuf0[eax] - abuf1[eax] >>7*/
             "psraw                  $3, %%mm7       \n\t" /* abuf0[eax] - abuf1[eax] >>7*/
             "packuswb            %%mm7, %%mm1       \n\t"
-            WRITEBGR32(%4, 8280(%5), %%r8, %%mm2, %%mm4, %%mm5, %%mm1, %%mm0, %%mm7, %%mm3, %%mm6)
+            WRITEBGR32(%q4, 8280(%5), %%r8, %%mm2, %%mm4, %%mm5, %%mm1, %%mm0, %%mm7, %%mm3, %%mm6)
             :: "c" (buf0), "d" (buf1), "S" (ubuf0), "D" (ubuf1), "r" (dest),
                "a" (&c->redDither),
                "r" (abuf0), "r" (abuf1)
@@ -877,17 +877,17 @@ static void RENAME(yuv2rgb32_2)(SwsContext *c, const int16_t *buf[2],
             "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"
             "mov        %4, %%"REG_b"               \n\t"
             "push %%"REG_BP"                        \n\t"
-            YSCALEYUV2RGB(%%REGBP, %5)
-            "push                   %0              \n\t"
-            "push                   %1              \n\t"
+            YSCALEYUV2RGB(%%REGBP, %q5)
+            "push                   %q0              \n\t"
+            "push                   %q1              \n\t"
             "mov          "U_TEMP"(%5), %0          \n\t"
             "mov          "V_TEMP"(%5), %1          \n\t"
-            YSCALEYUV2RGB_YA(%%REGBP, %5, %0, %1)
+            YSCALEYUV2RGB_YA(%%REGBP, %5, %q0, %q1)
             "psraw                  $3, %%mm1       \n\t" /* abuf0[eax] - abuf1[eax] >>7*/
             "psraw                  $3, %%mm7       \n\t" /* abuf0[eax] - abuf1[eax] >>7*/
             "packuswb            %%mm7, %%mm1       \n\t"
-            "pop                    %1              \n\t"
-            "pop                    %0              \n\t"
+            "pop                    %q1              \n\t"
+            "pop                    %q0              \n\t"
             WRITEBGR32(%%REGb, 8280(%5), %%REGBP, %%mm2, %%mm4, %%mm5, %%mm1, %%mm0, %%mm7, %%mm3, %%mm6)
             "pop %%"REG_BP"                         \n\t"
             "mov "ESP_OFFSET"(%5), %%"REG_b"        \n\t"
@@ -900,7 +900,7 @@ static void RENAME(yuv2rgb32_2)(SwsContext *c, const int16_t *buf[2],
             "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"
             "mov        %4, %%"REG_b"               \n\t"
             "push %%"REG_BP"                        \n\t"
-            YSCALEYUV2RGB(%%REGBP, %5)
+            YSCALEYUV2RGB(%%REGBP, %q5)
             "pcmpeqd %%mm7, %%mm7                   \n\t"
             WRITEBGR32(%%REGb, 8280(%5), %%REGBP, %%mm2, %%mm4, %%mm5, %%mm7, %%mm0, %%mm1, %%mm3, %%mm6)
             "pop %%"REG_BP"                         \n\t"
@@ -924,7 +924,7 @@ static void RENAME(yuv2bgr24_2)(SwsContext *c, const int16_t *buf[2],
         "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"
         "mov        %4, %%"REG_b"               \n\t"
         "push %%"REG_BP"                        \n\t"
-        YSCALEYUV2RGB(%%REGBP, %5)
+        YSCALEYUV2RGB(%%REGBP, %q5)
         "pxor    %%mm7, %%mm7                   \n\t"
         WRITEBGR24(%%REGb, 8280(%5), %%REGBP)
         "pop %%"REG_BP"                         \n\t"
@@ -947,7 +947,7 @@ static void RENAME(yuv2rgb555_2)(SwsContext *c, const int16_t *buf[2],
         "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"
         "mov        %4, %%"REG_b"               \n\t"
         "push %%"REG_BP"                        \n\t"
-        YSCALEYUV2RGB(%%REGBP, %5)
+        YSCALEYUV2RGB(%%REGBP, %q5)
         "pxor    %%mm7, %%mm7                   \n\t"
         /* mm2=B, %%mm4=G, %%mm5=R, %%mm7=0 */
 #ifdef DITHER1XBPP
@@ -976,7 +976,7 @@ static void RENAME(yuv2rgb565_2)(SwsContext *c, const int16_t *buf[2],
         "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"
         "mov        %4, %%"REG_b"               \n\t"
         "push %%"REG_BP"                        \n\t"
-        YSCALEYUV2RGB(%%REGBP, %5)
+        YSCALEYUV2RGB(%%REGBP, %q5)
         "pxor    %%mm7, %%mm7                   \n\t"
         /* mm2=B, %%mm4=G, %%mm5=R, %%mm7=0 */
 #ifdef DITHER1XBPP
@@ -1002,11 +1002,11 @@ static void RENAME(yuv2rgb565_2)(SwsContext *c, const int16_t *buf[2],
     "xor            "#index", "#index"                        \n\t"\
     ".p2align              4            \n\t"\
     "1:                                 \n\t"\
-    "movq     (%2, "#index"), %%mm2     \n\t" /* uvbuf0[eax]*/\
-    "movq     (%3, "#index"), %%mm3     \n\t" /* uvbuf1[eax]*/\
+    "movq     (%q2, "#index"), %%mm2     \n\t" /* uvbuf0[eax]*/\
+    "movq     (%q3, "#index"), %%mm3     \n\t" /* uvbuf1[eax]*/\
     "add "UV_OFF_BYTE"("#c"), "#index"  \n\t" \
-    "movq     (%2, "#index"), %%mm5     \n\t" /* uvbuf0[eax+2048]*/\
-    "movq     (%3, "#index"), %%mm4     \n\t" /* uvbuf1[eax+2048]*/\
+    "movq     (%q2, "#index"), %%mm5     \n\t" /* uvbuf0[eax+2048]*/\
+    "movq     (%q3, "#index"), %%mm4     \n\t" /* uvbuf1[eax+2048]*/\
     "sub "UV_OFF_BYTE"("#c"), "#index"  \n\t" \
     "psubw             %%mm3, %%mm2     \n\t" /* uvbuf0[eax] - uvbuf1[eax]*/\
     "psubw             %%mm4, %%mm5     \n\t" /* uvbuf0[eax+2048] - uvbuf1[eax+2048]*/\
@@ -1017,10 +1017,10 @@ static void RENAME(yuv2rgb565_2)(SwsContext *c, const int16_t *buf[2],
     "psraw                $7, %%mm4     \n\t" /* uvbuf0[eax+2048] - uvbuf1[eax+2048] >>4*/\
     "paddw             %%mm2, %%mm3     \n\t" /* uvbuf0[eax]uvalpha1 - uvbuf1[eax](1-uvalpha1)*/\
     "paddw             %%mm5, %%mm4     \n\t" /* uvbuf0[eax+2048]uvalpha1 - uvbuf1[eax+2048](1-uvalpha1)*/\
-    "movq  (%0, "#index", 2), %%mm0     \n\t" /*buf0[eax]*/\
-    "movq  (%1, "#index", 2), %%mm1     \n\t" /*buf1[eax]*/\
-    "movq 8(%0, "#index", 2), %%mm6     \n\t" /*buf0[eax]*/\
-    "movq 8(%1, "#index", 2), %%mm7     \n\t" /*buf1[eax]*/\
+    "movq  (%q0, "#index", 2), %%mm0     \n\t" /*buf0[eax]*/\
+    "movq  (%q1, "#index", 2), %%mm1     \n\t" /*buf1[eax]*/\
+    "movq 8(%q0, "#index", 2), %%mm6     \n\t" /*buf0[eax]*/\
+    "movq 8(%q1, "#index", 2), %%mm7     \n\t" /*buf1[eax]*/\
     "psubw             %%mm1, %%mm0     \n\t" /* buf0[eax] - buf1[eax]*/\
     "psubw             %%mm7, %%mm6     \n\t" /* buf0[eax] - buf1[eax]*/\
     "pmulhw "LUM_MMX_FILTER_OFFSET"+8("#c"), %%mm0  \n\t" /* (buf0[eax] - buf1[eax])yalpha1>>16*/\
@@ -1058,9 +1058,9 @@ static void RENAME(yuv2yuyv422_2)(SwsContext *c, const int16_t *buf[2],
     "xor            "#index", "#index"  \n\t"\
     ".p2align              4            \n\t"\
     "1:                                 \n\t"\
-    "movq     (%2, "#index"), %%mm3     \n\t" /* uvbuf0[eax]*/\
+    "movq     (%q2, "#index"), %%mm3     \n\t" /* uvbuf0[eax]*/\
     "add "UV_OFF_BYTE"("#c"), "#index"  \n\t" \
-    "movq     (%2, "#index"), %%mm4     \n\t" /* uvbuf0[eax+2048]*/\
+    "movq     (%q2, "#index"), %%mm4     \n\t" /* uvbuf0[eax+2048]*/\
     "sub "UV_OFF_BYTE"("#c"), "#index"  \n\t" \
     "psraw                $4, %%mm3     \n\t" /* uvbuf0[eax] - uvbuf1[eax] >>4*/\
     "psraw                $4, %%mm4     \n\t" /* uvbuf0[eax+2048] - uvbuf1[eax+2048] >>4*/\
@@ -1071,8 +1071,8 @@ static void RENAME(yuv2yuyv422_2)(SwsContext *c, const int16_t *buf[2],
     "pmulhw "UG_COEFF"("#c"), %%mm3     \n\t"\
     "pmulhw "VG_COEFF"("#c"), %%mm4     \n\t"\
     /* mm2=(U-128)8, mm3=ug, mm4=vg mm5=(V-128)8 */\
-    "movq  (%0, "#index", 2), %%mm1     \n\t" /*buf0[eax]*/\
-    "movq 8(%0, "#index", 2), %%mm7     \n\t" /*buf0[eax]*/\
+    "movq  (%q0, "#index", 2), %%mm1     \n\t" /*buf0[eax]*/\
+    "movq 8(%q0, "#index", 2), %%mm7     \n\t" /*buf0[eax]*/\
     "psraw                $4, %%mm1     \n\t" /* buf0[eax] - buf1[eax] >>4*/\
     "psraw                $4, %%mm7     \n\t" /* buf0[eax] - buf1[eax] >>4*/\
     "pmulhw "UB_COEFF"("#c"), %%mm2     \n\t"\
@@ -1110,11 +1110,11 @@ static void RENAME(yuv2yuyv422_2)(SwsContext *c, const int16_t *buf[2],
     "xor            "#index", "#index"  \n\t"\
     ".p2align              4            \n\t"\
     "1:                                 \n\t"\
-    "movq     (%2, "#index"), %%mm2     \n\t" /* uvbuf0[eax]*/\
-    "movq     (%3, "#index"), %%mm3     \n\t" /* uvbuf1[eax]*/\
+    "movq     (%q2, "#index"), %%mm2     \n\t" /* uvbuf0[eax]*/\
+    "movq     (%q3, "#index"), %%mm3     \n\t" /* uvbuf1[eax]*/\
     "add "UV_OFF_BYTE"("#c"), "#index"  \n\t" \
-    "movq     (%2, "#index"), %%mm5     \n\t" /* uvbuf0[eax+2048]*/\
-    "movq     (%3, "#index"), %%mm4     \n\t" /* uvbuf1[eax+2048]*/\
+    "movq     (%q2, "#index"), %%mm5     \n\t" /* uvbuf0[eax+2048]*/\
+    "movq     (%q3, "#index"), %%mm4     \n\t" /* uvbuf1[eax+2048]*/\
     "sub "UV_OFF_BYTE"("#c"), "#index"  \n\t" \
     "paddw             %%mm2, %%mm3     \n\t" /* uvbuf0[eax] + uvbuf1[eax]*/\
     "paddw             %%mm5, %%mm4     \n\t" /* uvbuf0[eax+2048] + uvbuf1[eax+2048]*/\
@@ -1127,8 +1127,8 @@ static void RENAME(yuv2yuyv422_2)(SwsContext *c, const int16_t *buf[2],
     "pmulhw "UG_COEFF"("#c"), %%mm3     \n\t"\
     "pmulhw "VG_COEFF"("#c"), %%mm4     \n\t"\
     /* mm2=(U-128)8, mm3=ug, mm4=vg mm5=(V-128)8 */\
-    "movq  (%0, "#index", 2), %%mm1     \n\t" /*buf0[eax]*/\
-    "movq 8(%0, "#index", 2), %%mm7     \n\t" /*buf0[eax]*/\
+    "movq  (%q0, "#index", 2), %%mm1     \n\t" /*buf0[eax]*/\
+    "movq 8(%q0, "#index", 2), %%mm7     \n\t" /*buf0[eax]*/\
     "psraw                $4, %%mm1     \n\t" /* buf0[eax] - buf1[eax] >>4*/\
     "psraw                $4, %%mm7     \n\t" /* buf0[eax] - buf1[eax] >>4*/\
     "pmulhw "UB_COEFF"("#c"), %%mm2     \n\t"\
@@ -1162,8 +1162,8 @@ static void RENAME(yuv2yuyv422_2)(SwsContext *c, const int16_t *buf[2],
 #define YSCALEYUV2RGB1b(index, c)  REAL_YSCALEYUV2RGB1b(index, c)
 
 #define REAL_YSCALEYUV2RGB1_ALPHA(index) \
-    "movq  (%1, "#index", 2), %%mm7     \n\t" /* abuf0[index  ]     */\
-    "movq 8(%1, "#index", 2), %%mm1     \n\t" /* abuf0[index+4]     */\
+    "movq  (%q1, "#index", 2), %%mm7     \n\t" /* abuf0[index  ]     */\
+    "movq 8(%q1, "#index", 2), %%mm1     \n\t" /* abuf0[index+4]     */\
     "psraw                $7, %%mm7     \n\t" /* abuf0[index  ] >>7 */\
     "psraw                $7, %%mm1     \n\t" /* abuf0[index+4] >>7 */\
     "packuswb          %%mm1, %%mm7     \n\t"
@@ -1386,14 +1386,14 @@ static void RENAME(yuv2rgb565_1)(SwsContext *c, const int16_t *buf0,
     "xor            "#index", "#index"  \n\t"\
     ".p2align              4            \n\t"\
     "1:                                 \n\t"\
-    "movq     (%2, "#index"), %%mm3     \n\t" /* uvbuf0[eax]*/\
+    "movq     (%q2, "#index"), %%mm3     \n\t" /* uvbuf0[eax]*/\
     "add "UV_OFF_BYTE"("#c"), "#index"  \n\t" \
-    "movq     (%2, "#index"), %%mm4     \n\t" /* uvbuf0[eax+2048]*/\
+    "movq     (%q2, "#index"), %%mm4     \n\t" /* uvbuf0[eax+2048]*/\
     "sub "UV_OFF_BYTE"("#c"), "#index"  \n\t" \
     "psraw                $7, %%mm3     \n\t" \
     "psraw                $7, %%mm4     \n\t" \
-    "movq  (%0, "#index", 2), %%mm1     \n\t" /*buf0[eax]*/\
-    "movq 8(%0, "#index", 2), %%mm7     \n\t" /*buf0[eax]*/\
+    "movq  (%q0, "#index", 2), %%mm1     \n\t" /*buf0[eax]*/\
+    "movq 8(%q0, "#index", 2), %%mm7     \n\t" /*buf0[eax]*/\
     "psraw                $7, %%mm1     \n\t" \
     "psraw                $7, %%mm7     \n\t" \
 
@@ -1403,18 +1403,18 @@ static void RENAME(yuv2rgb565_1)(SwsContext *c, const int16_t *buf0,
     "xor "#index", "#index"             \n\t"\
     ".p2align              4            \n\t"\
     "1:                                 \n\t"\
-    "movq     (%2, "#index"), %%mm2     \n\t" /* uvbuf0[eax]*/\
-    "movq     (%3, "#index"), %%mm3     \n\t" /* uvbuf1[eax]*/\
+    "movq     (%q2, "#index"), %%mm2     \n\t" /* uvbuf0[eax]*/\
+    "movq     (%q3, "#index"), %%mm3     \n\t" /* uvbuf1[eax]*/\
     "add "UV_OFF_BYTE"("#c"), "#index"  \n\t" \
-    "movq     (%2, "#index"), %%mm5     \n\t" /* uvbuf0[eax+2048]*/\
-    "movq     (%3, "#index"), %%mm4     \n\t" /* uvbuf1[eax+2048]*/\
+    "movq     (%q2, "#index"), %%mm5     \n\t" /* uvbuf0[eax+2048]*/\
+    "movq     (%q3, "#index"), %%mm4     \n\t" /* uvbuf1[eax+2048]*/\
     "sub "UV_OFF_BYTE"("#c"), "#index"  \n\t" \
     "paddw             %%mm2, %%mm3     \n\t" /* uvbuf0[eax] + uvbuf1[eax]*/\
     "paddw             %%mm5, %%mm4     \n\t" /* uvbuf0[eax+2048] + uvbuf1[eax+2048]*/\
     "psrlw                $8, %%mm3     \n\t" \
     "psrlw                $8, %%mm4     \n\t" \
-    "movq  (%0, "#index", 2), %%mm1     \n\t" /*buf0[eax]*/\
-    "movq 8(%0, "#index", 2), %%mm7     \n\t" /*buf0[eax]*/\
+    "movq  (%q0, "#index", 2), %%mm1     \n\t" /*buf0[eax]*/\
+    "movq 8(%q0, "#index", 2), %%mm7     \n\t" /*buf0[eax]*/\
     "psraw                $7, %%mm1     \n\t" \
     "psraw                $7, %%mm7     \n\t"
 #define YSCALEYUV2PACKED1b(index, c)  REAL_YSCALEYUV2PACKED1b(index, c)
@@ -1507,8 +1507,7 @@ static void RENAME(hyscale_fast)(SwsContext *c, int16_t *dst,
 #else
 #define CALL_MMXEXT_FILTER_CODE \
         "movl (%%"REG_b"), %%esi        \n\t"\
-        "mov %%"REG_d", %4        \n\t"\
-        "naclcall         %%"REG_d"                     \n\t"\
+        "naclcall         %k4,%%r15                     \n\t"\
         "addl (%%"REG_b", %%"REG_a"), %%"REG_c" \n\t"\
         "add               %%"REG_a", %%"REG_D" \n\t"\
         "xor               %%"REG_a", %%"REG_a" \n\t"\
@@ -1537,7 +1536,7 @@ static void RENAME(hyscale_fast)(SwsContext *c, int16_t *dst,
 #endif
 #endif
         :: "m" (src), "m" (dst), "m" (filter), "m" (filterPos),
-           "m" (mmxextFilterCode)
+           "r" (mmxextFilterCode)
 #if defined(PIC)
           ,"m" (ebxsave)
 #endif
@@ -1621,7 +1620,7 @@ static void RENAME(hcscale_fast)(SwsContext *c, int16_t *dst1, int16_t *dst2,
 #endif
 #endif
         :: "m" (src1), "m" (dst1), "m" (filter), "m" (filterPos),
-           "m" (mmxextFilterCode), "m" (src2), "m"(dst2)
+           "r" (mmxextFilterCode), "m" (src2), "m"(dst2)
 #if defined(PIC)
           ,"m" (ebxsave)
 #endif
